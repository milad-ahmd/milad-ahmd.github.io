{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/collections.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/portal.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js","webpack:///src/app/feature/main/jobs/jobs-routing.module.ts","webpack:///src/app/feature/main/jobs/jobs.module.ts","webpack:///src/app/feature/main/jobs/jobs/jobs.component.ts","webpack:///src/app/feature/main/jobs/jobs/jobs.component.html","webpack:///src/app/feature/main/jobs/resume/resume.component.ts","webpack:///src/app/feature/main/jobs/resume/resume.component.html","webpack:///src/app/services/job.service.ts"],"names":["DataSource","isDataSource","value","connect","ArrayDataSource","_data","CollectionViewer","SelectionModel","_multiple","initiallySelectedValues","_emitChanges","_selection","Set","_deselectedToEmit","_selectedToEmit","changed","length","forEach","_markSelected","values","_verifyValueAssignment","_emitChangeEvent","_unmarkSelected","isSelected","deselect","select","_unmarkAll","has","size","isEmpty","predicate","selected","_selected","sort","next","source","added","removed","add","push","getMultipleValuesInSingleSelectionError","Array","from","SelectionChange","Error","UniqueSelectionDispatcher","_listeners","id","name","listener","filter","registered","ɵfac","UniqueSelectionDispatcher_Factory","t","ɵprov","factory","token","providedIn","type","args","TreeDataNodeFlattener","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","ScrollStrategy","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategyConfig","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategyConfig","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ScrollStrategyOptions_Factory","ctorParameters","undefined","decorators","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","OriginConnectionPosition","OverlayConnectionPosition","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","_keydownEventSubscriptions","_keydownEvents","_isAttached","addEventListener","index","indexOf","splice","removeEventListener","OverlayKeyboardDispatcher_Factory","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","provide","deps","useFactory","isTestEnvironment","__karma__","jasmine","OverlayContainer","_platform","container","_containerElement","parentNode","removeChild","_createContainer","isBrowser","containerClass","oppositePlatformContainers","querySelectorAll","createElement","setAttribute","appendChild","OverlayContainer_Factory","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","OVERLAY_CONTAINER_PROVIDER","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","_keydownEventsObservable","observer","subscription","_scrollStrategy","attach","_positionStrategy","positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","asObservable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","apply","strategy","sizeConfig","assign","dir","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","children","OverlaySizeConfig","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","verticalFit","horizontalFit","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","Element","Point","OverlayFit","FallbackPosition","BoundingBoxRect","FlexibleFit","ConnectedPosition","destination","hasOwnProperty","input","split","units","parseFloat","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","slice","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","elementRef","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","_appRef","get","Overlay_Factory","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY","CdkOverlayOrigin","CdkOverlayOrigin_Factory","ɵdir","selectors","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","viewportMargin","open","backdropClick","positionChange","overlayKeydown","_templatePortal","_scrollStrategyFactory","changes","_position","_updatePositionStrategy","_attachOverlay","_detachOverlay","create","_buildConfig","keydownEvents","keyCode","preventDefault","_createPositionStrategy","currentPosition","withGrowAfterOpen","lockPosition","withTransformOriginOn","transformOriginSelector","flexibleConnectedTo","p","emit","_createOverlay","CdkConnectedOverlay_Factory","inputs","outputs","features","propDecorators","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","ɵmod","ɵinj","OverlayModule_Factory","providers","imports","ngJitMode","declarations","exports","OVERLAY_PROVIDERS","FullscreenOverlayContainer","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","throwNullPortalError","throwPortalAlreadyAttachedError","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","throwNullPortalOutletError","throwNoPortalAttachedError","ComponentType","Portal","_attachedHost","ComponentPortal","component","injector","componentFactoryResolver","TemplatePortal","template","context","DomPortal","PortalOutlet","BasePortalOutlet","attachDomPortal","_attachedPortal","attachComponentPortal","attachTemplatePortal","setAttachedHost","_invokeDisposeFn","_disposeFn","BasePortalHost","DomPortalOutlet","outletElement","_defaultInjector","anchorNode","createComment","replaceChild","resolver","componentFactory","resolveComponentFactory","componentRef","createComponent","setDisposeFn","destroy","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","rootNode","DomPortalHost","CdkPortal","CdkPortal_Factory","TemplatePortalDirective","TemplatePortalDirective_Factory","ɵTemplatePortalDirective_BaseFactory","useExisting","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","_attachedRef","ref","clear","nodeType","ELEMENT_NODE","CdkPortalOutlet_Factory","PortalHostDirective","PortalHostDirective_Factory","ɵPortalHostDirective_BaseFactory","PortalModule","PortalModule_Factory","PortalInjector","_parentInjector","_customTokens","notFoundValue","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","VirtualScrollStrategy","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","_viewport","_itemSize","_minBufferPx","_maxBufferPx","_updateTotalContentSize","_updateRenderedRange","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","end","viewportSize","dataLength","startBuffer","expandStart","ceil","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","CdkFixedSizeVirtualScroll","updateItemAndBufferSize","CdkFixedSizeVirtualScroll_Factory","DEFAULT_SCROLL_TIME","ScrollDispatcher","_scrolled","_globalSubscription","_scrolledCount","Map","set","elementScrolled","scrollableReference","auditTimeInMs","_addGlobalListener","_removeGlobalListener","_","deregister","ancestors","getAncestorScrollContainers","target","scrollingContainers","_subscription","_scrollableContainsElement","doc","_getDocument","defaultView","scrollableElement","_getWindow","ScrollDispatcher_Factory","CdkScrollable","scrollDispatcher","ngZone","_destroyed","_elementScrolled","register","options","el","_applyScrollToOptions","scrollTo","scrollTop","scrollLeft","LEFT","RIGHT","CdkScrollable_Factory","DEFAULT_RESIZE_TIME","ViewportScrollPosition","ViewportRuler","_change","_invalidateCache","_updateViewportSize","_viewportSize","output","documentRect","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","rangesEqual","r1","r2","SCROLL_SCHEDULER","CdkVirtualScrollViewport","_changeDetectorRef","_detachedSubject","_renderedRangeSubject","_orientation","Promise","resolve","then","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","checkViewportSize","_measureViewportSize","onContentScrolled","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","onDataLengthChanged","_doChangeDetection","_calculateSpacerSize","range","onContentRendered","to","isHorizontal","orientation","axisDirection","Number","_renderedContentTransform","measureRenderedContentSize","onRenderedOffsetChanged","scrollToIndex","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","viewportEl","runAfter","markForCheck","runAfterChangeDetection","CdkVirtualScrollViewport_Factory","ɵcmp","viewQuery","CdkVirtualScrollViewport_Query","rf","ctx","_t","first","hostAttrs","hostVars","hostBindings","CdkVirtualScrollViewport_HostBindings","ngContentSelectors","decls","vars","consts","CdkVirtualScrollViewport_Template","encapsulation","changeDetection","None","OnPush","getSize","node","rect","CdkVirtualForOf","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","prev","cur","_changeDataSource","_differ","_templateCache","_needsUpdate","_onRenderedDataChange","renderedStartIndex","rangeLen","totalSize","view","j","diff","_renderedItems","_updateContext","_applyChanges","find","cdkVirtualForTrackBy","oldDs","newDs","disconnect","count","_updateComputedContextProperties","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_insertViewForNewItem","$implicit","item","_cacheView","_detachView","move","forEachIdentityChange","_insertViewFromCache","_createEmbeddedViewAt","last","even","odd","cdkVirtualForOf","_cdkVirtualForOf","cachedView","pop","insert","prototype","call","_cdkVirtualForTrackBy","CdkVirtualForOf_Factory","cdkVirtualForTemplate","ScrollingModule","ScrollingModule_Factory","MatDialogContainer_ng_template_0_Template","DialogPosition","MatDialogConfig","role","disableClose","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","throwMatDialogContentAlreadyAttachedError","MatDialogContainer","_elementRef","_focusTrapFactory","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_savePreviouslyFocusedElement","_ariaLabelledBy","_focusTrap","focusInitialElementWhenReady","activeElement","focus","toFocus","toState","_trapFocus","_restoreFocus","MatDialogContainer_Factory","MatDialogContainer_Query","MatDialogContainer_HostBindings","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","_onAnimationStart","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","_onAnimationDone","_id","MatDialogContainer_Template","directives","animation","Default","animations","uniqueId","MatDialogState","OPEN","CLOSING","CLOSED","MatDialogRef","_containerInstance","_afterOpened","_afterClosed","_beforeClosed","phaseName","_closeFallbackTimeout","detachments","_result","componentInstance","dialogResult","totalTime","_startExitAnimation","_getPositionStrategy","centerHorizontally","centerVertically","addPanelClass","removePanelClass","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MatDialog","_defaultOptions","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","afterClosed","_removeOpenDialog","afterOpened","_closeDialogs","dialog","_getOverlayConfig","dialogConfig","state","global","userInjector","useValue","containerPortal","containerRef","instance","_createInjector","contentRef","previousValue","removeAttribute","siblings","sibling","nodeName","hasAttribute","getAttribute","dialogs","MatDialog_Factory","defaultOptions","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","MatDialogClose_Factory","MatDialogClose_HostBindings","MatDialogClose_click_HostBindingHandler","_matDialogClose","MatDialogTitle","_dialogRef","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","MatDialogModule","MatDialogModule_Factory","entryComponents","routes","path","JobsRoutingModule","forChild","JobsModule","JobsComponent","service","loading","getJobs","getAll","res","templateUrl","styleUrls","ResumeComponent","JobService","_HttpClient","_objectName","getServiceF","page"],"mappings":"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","file":"jobs-jobs-module-es5.js","sourcesContent":["import { isObservable, of, Subject } from 'rxjs';\nimport { Injectable, ɵɵdefineInjectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @abstract\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nclass DataSource {\n}\nif (false) {\n    /**\n     * Connects a collection viewer (such as a data-table) to this data source. Note that\n     * the stream provided will be accessed during change detection and should not directly change\n     * values that are bound in template views.\n     * @abstract\n     * @param {?} collectionViewer The component that exposes a view over the data provided by this\n     *     data source.\n     * @return {?} Observable that emits a new value when the data changes.\n     */\n    DataSource.prototype.connect = function (collectionViewer) { };\n    /**\n     * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n     * to perform any clean-up or tear-down operations when a view is being destroyed.\n     *\n     * @abstract\n     * @param {?} collectionViewer The component that exposes a view over the data provided by this\n     *     data source.\n     * @return {?}\n     */\n    DataSource.prototype.disconnect = function (collectionViewer) { };\n}\n/**\n * Checks whether an object is a data source.\n * @param {?} value\n * @return {?}\n */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/array-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\nclass ArrayDataSource extends DataSource {\n    /**\n     * @param {?} _data\n     */\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    /**\n     * @return {?}\n     */\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() { }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ArrayDataSource.prototype._data;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/collection-viewer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Interface for any component that provides a view of some data collection and wants to provide\n * information regarding the view and any changes made.\n * @record\n */\nfunction CollectionViewer() { }\nif (false) {\n    /**\n     * A stream that emits whenever the `CollectionViewer` starts looking at a new portion of the\n     * data. The `start` index is inclusive, while the `end` is exclusive.\n     * @type {?}\n     */\n    CollectionViewer.prototype.viewChange;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/selection-model.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nclass SelectionModel {\n    /**\n     * @param {?=} _multiple\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                value => this._markSelected(value)));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selected values.\n     * @return {?}\n     */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._markSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._unmarkSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            (/** @type {?} */ (this._selected)).sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /**\n     * Selects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Deselects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Clears out the selected values.\n     * @private\n     * @return {?}\n     */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => this._unmarkSelected(value)));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\nif (false) {\n    /**\n     * Currently-selected values.\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._selection;\n    /**\n     * Keeps track of the deselected options that haven't been emitted by the change event.\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._deselectedToEmit;\n    /**\n     * Keeps track of the selected options that haven't been emitted by the change event.\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._selectedToEmit;\n    /**\n     * Cache for the array value of the selected items.\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._selected;\n    /**\n     * Event emitted when the value has changed.\n     * @type {?}\n     */\n    SelectionModel.prototype.changed;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._emitChanges;\n}\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * \\@docs-private\n * @record\n * @template T\n */\nfunction SelectionChange() { }\nif (false) {\n    /**\n     * Model that dispatched the event.\n     * @type {?}\n     */\n    SelectionChange.prototype.source;\n    /**\n     * Options that were added to the model.\n     * @type {?}\n     */\n    SelectionChange.prototype.added;\n    /**\n     * Options that were removed from the model.\n     * @type {?}\n     */\n    SelectionChange.prototype.removed;\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/unique-selection-dispatcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return (/**\n         * @return {?}\n         */\n        () => {\n            this._listeners = this._listeners.filter((/**\n             * @param {?} registered\n             * @return {?}\n             */\n            (registered) => {\n                return listener !== registered;\n            }));\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) { return new (t || UniqueSelectionDispatcher)(); };\n/** @nocollapse */ UniqueSelectionDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    UniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/tree-adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Interface for a class that can flatten hierarchical structured data and re-expand the flattened\n * data back into its original structure. Should be used in conjunction with the cdk-tree.\n * @record\n * @template T\n */\nfunction TreeDataNodeFlattener() { }\nif (false) {\n    /**\n     * Transforms a set of hierarchical structured data into a flattened data array.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    TreeDataNodeFlattener.prototype.flattenNodes = function (structuredData) { };\n    /**\n     * Expands a flattened array of data into its hierarchical form using the provided expansion\n     * model.\n     * @param {?} nodes\n     * @param {?} expansionModel\n     * @return {?}\n     */\n    TreeDataNodeFlattener.prototype.expandFlattenedNodes = function (nodes, expansionModel) { };\n    /**\n     * Put node descendants of node in array.\n     * If `onlyExpandable` is true, then only process expandable descendants.\n     * @param {?} node\n     * @param {?} nodes\n     * @param {?} onlyExpandable\n     * @return {?}\n     */\n    TreeDataNodeFlattener.prototype.nodeDescendents = function (node, nodes, onlyExpandable) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, getMultipleValuesInSingleSelectionError, isDataSource };\n\n//# sourceMappingURL=collections.js.map","import { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, Optional, SkipSelf, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, Subscription, Observable, merge } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/scroll/block-scroll-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} document\n     */\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    attach() { }\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    enable() {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            const root = (/** @type {?} */ (this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    disable() {\n        if (this._isEnabled) {\n            /** @type {?} */\n            const html = (/** @type {?} */ (this._document.documentElement));\n            /** @type {?} */\n            const body = (/** @type {?} */ (this._document.body));\n            /** @type {?} */\n            const htmlStyle = (/** @type {?} */ (html.style));\n            /** @type {?} */\n            const bodyStyle = (/** @type {?} */ (body.style));\n            /** @type {?} */\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        /** @type {?} */\n        const html = (/** @type {?} */ (this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        const body = this._document.body;\n        /** @type {?} */\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._previousHTMLStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._previousScrollPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._isEnabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/scroll/scroll-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n * @record\n */\nfunction ScrollStrategy() { }\nif (false) {\n    /**\n     * Enable this scroll strategy (called when the attached overlay is attached to a portal).\n     * @type {?}\n     */\n    ScrollStrategy.prototype.enable;\n    /**\n     * Disable this scroll strategy (called when the attached overlay is detached from a portal).\n     * @type {?}\n     */\n    ScrollStrategy.prototype.disable;\n    /**\n     * Attaches this `ScrollStrategy` to an overlay.\n     * @type {?}\n     */\n    ScrollStrategy.prototype.attach;\n    /**\n     * Detaches the scroll strategy from the current overlay.\n     * @type {?|undefined}\n     */\n    ScrollStrategy.prototype.detach;\n}\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/scroll/close-scroll-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Config options for the CloseScrollStrategy.\n * @record\n */\nfunction CloseScrollStrategyConfig() { }\nif (false) {\n    /**\n     * Amount of pixels the user has to scroll before the overlay is closed.\n     * @type {?|undefined}\n     */\n    CloseScrollStrategyConfig.prototype.threshold;\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = (/**\n         * @return {?}\n         */\n        () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this._overlayRef.detach()));\n            }\n        });\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > (/** @type {?} */ ((/** @type {?} */ (this._config)).threshold))) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            }));\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.disable();\n        this._overlayRef = (/** @type {?} */ (null));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._scrollSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._initialScrollPosition;\n    /**\n     * Detaches the overlay ref and disables the scroll strategy.\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._detach;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/scroll/noop-scroll-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Scroll strategy that doesn't do anything.\n */\nclass NoopScrollStrategy {\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    enable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    disable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    attach() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/position/scroll-clip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some((/**\n     * @param {?} containerBounds\n     * @return {?}\n     */\n    containerBounds => {\n        /** @type {?} */\n        const outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        const outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        const outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    }));\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some((/**\n     * @param {?} scrollContainerRect\n     * @return {?}\n     */\n    scrollContainerRect => {\n        /** @type {?} */\n        const clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        const clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/scroll/reposition-scroll-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Config options for the RepositionScrollStrategy.\n * @record\n */\nfunction RepositionScrollStrategyConfig() { }\nif (false) {\n    /**\n     * Time in milliseconds to throttle the scroll events.\n     * @type {?|undefined}\n     */\n    RepositionScrollStrategyConfig.prototype.scrollThrottle;\n    /**\n     * Whether to close the overlay once the user has scrolled away completely.\n     * @type {?|undefined}\n     */\n    RepositionScrollStrategyConfig.prototype.autoClose;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    /** @type {?} */\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    /** @type {?} */\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._overlayRef.detach()));\n                    }\n                }\n            }));\n        }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.disable();\n        this._overlayRef = (/** @type {?} */ (null));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._scrollSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/scroll/scroll-strategy-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?} document\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = (/**\n         * @return {?}\n         */\n        () => new NoopScrollStrategy());\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (/**\n         * @param {?=} config\n         * @return {?}\n         */\n        (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config));\n        /**\n         * Block scrolling.\n         */\n        this.block = (/**\n         * @return {?}\n         */\n        () => new BlockScrollStrategy(this._viewportRuler, this._document));\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (/**\n         * @param {?=} config\n         * @return {?}\n         */\n        (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config));\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollStrategyOptions.ɵprov = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._document;\n    /**\n     * Do nothing on scroll.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.noop;\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * \\@param config Configuration to be used inside the scroll strategy.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.close;\n    /**\n     * Block scrolling.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.block;\n    /**\n     * Update the overlay's position on scroll.\n     * \\@param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.reposition;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/scroll/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/overlay-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nclass OverlayConfig {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            /** @type {?} */\n            const configKeys = (/** @type {?} */ (Object.keys(config)));\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = (/** @type {?} */ (config[key]));\n                }\n            }\n        }\n    }\n}\nif (false) {\n    /**\n     * Strategy with which to position the overlay.\n     * @type {?}\n     */\n    OverlayConfig.prototype.positionStrategy;\n    /**\n     * Strategy to be used when handling scroll events while the overlay is open.\n     * @type {?}\n     */\n    OverlayConfig.prototype.scrollStrategy;\n    /**\n     * Custom class to add to the overlay pane.\n     * @type {?}\n     */\n    OverlayConfig.prototype.panelClass;\n    /**\n     * Whether the overlay has a backdrop.\n     * @type {?}\n     */\n    OverlayConfig.prototype.hasBackdrop;\n    /**\n     * Custom class to add to the backdrop\n     * @type {?}\n     */\n    OverlayConfig.prototype.backdropClass;\n    /**\n     * The width of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.width;\n    /**\n     * The height of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.height;\n    /**\n     * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.minWidth;\n    /**\n     * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.minHeight;\n    /**\n     * The max-width of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.maxWidth;\n    /**\n     * The max-height of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.maxHeight;\n    /**\n     * Direction of the text in the overlay panel. If a `Directionality` instance\n     * is passed in, the overlay will handle changes to its value automatically.\n     * @type {?}\n     */\n    OverlayConfig.prototype.direction;\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     * @type {?}\n     */\n    OverlayConfig.prototype.disposeOnNavigation;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/position/connected-position.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A connection point on the origin element.\n * @record\n */\nfunction OriginConnectionPosition() { }\nif (false) {\n    /** @type {?} */\n    OriginConnectionPosition.prototype.originX;\n    /** @type {?} */\n    OriginConnectionPosition.prototype.originY;\n}\n/**\n * A connection point on the overlay element.\n * @record\n */\nfunction OverlayConnectionPosition() { }\nif (false) {\n    /** @type {?} */\n    OverlayConnectionPosition.prototype.overlayX;\n    /** @type {?} */\n    OverlayConnectionPosition.prototype.overlayY;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nclass ConnectionPositionPair {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @param {?=} panelClass\n     */\n    constructor(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\nif (false) {\n    /**\n     * X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.originX;\n    /**\n     * Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.originY;\n    /**\n     * X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.overlayX;\n    /**\n     * Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.overlayY;\n    /**\n     * Offset along the X axis.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.offsetX;\n    /**\n     * Offset along the Y axis.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.offsetY;\n    /**\n     * Class(es) to be applied to the panel while this position is active.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.panelClass;\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nclass ScrollingVisibility {\n}\nif (false) {\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOriginClipped;\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOriginOutsideView;\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOverlayClipped;\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOverlayOutsideView;\n}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nclass ConnectedOverlayPositionChange {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    constructor(connectionPair, scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/** @nocollapse */\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\nif (false) {\n    /**\n     * The position used as a result of this change.\n     * @type {?}\n     */\n    ConnectedOverlayPositionChange.prototype.connectionPair;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    ConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        });\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    remove(overlayRef) {\n        /** @type {?} */\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @private\n     * @return {?}\n     */\n    _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayKeyboardDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * Currently attached overlays in the order they were attached.\n     * @type {?}\n     */\n    OverlayKeyboardDispatcher.prototype._attachedOverlays;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayKeyboardDispatcher.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayKeyboardDispatcher.prototype._isAttached;\n    /**\n     * Keyboard event listener that will be attached to the body.\n     * @type {?}\n     * @private\n     */\n    OverlayKeyboardDispatcher.prototype._keydownListener;\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        (/** @type {?} */ (\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/overlay-container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n * @type {?}\n */\nconst isTestEnvironment = typeof window !== 'undefined' && !!window &&\n    !!(((/** @type {?} */ (window))).__karma__ || ((/** @type {?} */ (window))).jasmine);\n/**\n * Container inside which all overlays will render.\n */\nclass OverlayContainer {\n    /**\n     * @param {?} document\n     * @param {?=} _platform\n     */\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @protected\n     * @return {?}\n     */\n    _createContainer() {\n        // @breaking-change 10.0.0 Remove null check for `_platform`.\n        /** @type {?} */\n        const isBrowser = this._platform ? this._platform.isBrowser : typeof window !== 'undefined';\n        /** @type {?} */\n        const containerClass = 'cdk-overlay-container';\n        if (isBrowser || isTestEnvironment) {\n            /** @type {?} */\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                (/** @type {?} */ (oppositePlatformContainers[i].parentNode)).removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        /** @type {?} */\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (isTestEnvironment) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\n/** @nocollapse */\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/** @nocollapse */ OverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayContainer, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    OverlayContainer.prototype._containerElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    OverlayContainer.prototype._document;\n    /**\n     * @deprecated `platform` parameter to become required.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     * @protected\n     */\n    OverlayContainer.prototype._platform;\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        (/** @type {?} */ (DOCUMENT))\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/overlay-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    /**\n     * @param {?} _portalOutlet\n     * @param {?} _host\n     * @param {?} _pane\n     * @param {?} _config\n     * @param {?} _ngZone\n     * @param {?} _keyboardDispatcher\n     * @param {?} _document\n     * @param {?=} _location\n     */\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => this._backdropClick.next(event));\n        this._keydownEventsObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._keydownEvents.subscribe(observer);\n            this._keydownEventSubscriptions++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._keydownEventSubscriptions--;\n            });\n        }));\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /**\n     * The overlay's HTML element\n     * @return {?}\n     */\n    get overlayElement() {\n        return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    attach(portal) {\n        /** @type {?} */\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        }));\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe((/**\n             * @return {?}\n             */\n            () => this.dispose()));\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        /** @type {?} */\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        /** @type {?} */\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = (/** @type {?} */ (null));\n        }\n        this._previousHostParent = this._pane = (/** @type {?} */ (null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    getDirection() {\n        /** @type {?} */\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Switches to a new scroll strategy.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @private\n     * @return {?}\n     */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        /** @type {?} */\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @private\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @private\n     * @return {?}\n     */\n    _attachBackdrop() {\n        /** @type {?} */\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        (/** @type {?} */ (this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                }));\n            }));\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @private\n     * @return {?}\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            (/** @type {?} */ (this._host.parentNode)).appendChild(this._host);\n        }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    detachBackdrop() {\n        /** @type {?} */\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        /** @type {?} */\n        let timeoutId;\n        /** @type {?} */\n        let finishDetach = (/**\n         * @return {?}\n         */\n        () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses((/** @type {?} */ (backdropToDetach)), this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        });\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            (/** @type {?} */ (backdropToDetach)).addEventListener('transitionend', finishDetach);\n        }));\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => setTimeout(finishDetach, 500)));\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @private\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _toggleClasses(element, cssClasses, isAdd) {\n        /** @type {?} */\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach((/**\n         * @param {?} cssClass\n         * @return {?}\n         */\n        cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        }));\n    }\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @private\n     * @return {?}\n     */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            /** @type {?} */\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            }));\n        }));\n    }\n    /**\n     * Disposes of a scroll strategy.\n     * @private\n     * @return {?}\n     */\n    _disposeScrollStrategy() {\n        /** @type {?} */\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._backdropElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._backdropClick;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._attachments;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._detachments;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._positionStrategy;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._scrollStrategy;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._locationChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._backdropClickHandler;\n    /**\n     * Reference to the parent of the `_host` at the time it was detached. Used to restore\n     * the `_host` to its original position in the DOM when it gets re-attached.\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._previousHostParent;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._keydownEventsObservable;\n    /**\n     * Stream of keydown events dispatched to this overlay.\n     * @type {?}\n     */\n    OverlayRef.prototype._keydownEvents;\n    /**\n     * Amount of subscriptions to the keydown events.\n     * @type {?}\n     */\n    OverlayRef.prototype._keydownEventSubscriptions;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._portalOutlet;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._host;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._pane;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._keyboardDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._location;\n}\n/**\n * Size properties for an overlay.\n * @record\n */\nfunction OverlaySizeConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.width;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.height;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.minWidth;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.minHeight;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.maxWidth;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.maxHeight;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/position/flexible-connected-position-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/**\n * Class to be added to the overlay bounding box.\n * @type {?}\n */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * Regex used to split a string on its CSS units.\n * @type {?}\n */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /**\n     * @param {?} connectedTo\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?} _platform\n     * @param {?} _overlayContainer\n     */\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this._scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = this._positionChanges.asObservable();\n        this.setOrigin(connectedTo);\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        }));\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const originRect = this._originRect;\n        /** @type {?} */\n        const overlayRect = this._overlayRect;\n        /** @type {?} */\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        /** @type {?} */\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        /** @type {?} */\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            /** @type {?} */\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            /** @type {?} */\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            /** @type {?} */\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            let bestFit = null;\n            /** @type {?} */\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                /** @type {?} */\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition((/** @type {?} */ (bestFit)).position, (/** @type {?} */ (bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, (/** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            })));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} scrollables\n     * @return {THIS}\n     */\n    withScrollableContainers(scrollables) {\n        (/** @type {?} */ (this))._scrollables = scrollables;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Adds new preferred positions.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions List of positions options for this overlay.\n     * @return {THIS}\n     */\n    withPositions(positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf((/** @type {?} */ ((/** @type {?} */ (this))._lastPosition))) === -1) {\n            (/** @type {?} */ (this))._lastPosition = null;\n        }\n        (/** @type {?} */ (this))._validatePositions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {THIS}\n     */\n    withViewportMargin(margin) {\n        (/** @type {?} */ (this))._viewportMargin = margin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} flexibleDimensions\n     * @return {THIS}\n     */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        (/** @type {?} */ (this))._hasFlexibleDimensions = flexibleDimensions;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} growAfterOpen\n     * @return {THIS}\n     */\n    withGrowAfterOpen(growAfterOpen = true) {\n        (/** @type {?} */ (this))._growAfterOpen = growAfterOpen;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} canPush\n     * @return {THIS}\n     */\n    withPush(canPush = true) {\n        (/** @type {?} */ (this))._canPush = canPush;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    withLockedPosition(isLocked = true) {\n        (/** @type {?} */ (this))._positionLocked = isLocked;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin.\n     * @return {THIS}\n     */\n    setOrigin(origin) {\n        (/** @type {?} */ (this))._origin = origin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    withDefaultOffsetX(offset) {\n        (/** @type {?} */ (this))._offsetX = offset;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    withDefaultOffsetY(offset) {\n        (/** @type {?} */ (this))._offsetY = offset;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {THIS}\n     */\n    withTransformOriginOn(selector) {\n        (/** @type {?} */ (this))._transformOriginSelector = selector;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @private\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOriginPoint(originRect, pos) {\n        /** @type {?} */\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @private\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        /** @type {?} */\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @private\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        /** @type {?} */\n        let leftOverflow = 0 - x;\n        /** @type {?} */\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        let topOverflow = 0 - y;\n        /** @type {?} */\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        /** @type {?} */\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @private\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            const availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            const availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            /** @type {?} */\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            /** @type {?} */\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @private\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        /** @type {?} */\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        /** @type {?} */\n        let pushX = 0;\n        /** @type {?} */\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @private\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            /** @type {?} */\n            const scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        const elements = (/** @type {?} */ (this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        let xOrigin;\n        /** @type {?} */\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @private\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        let height;\n        /** @type {?} */\n        let top;\n        /** @type {?} */\n        let bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        /** @type {?} */\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        /** @type {?} */\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        let width;\n        /** @type {?} */\n        let left;\n        /** @type {?} */\n        let right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: (/** @type {?} */ (top)), left: (/** @type {?} */ (left)), bottom: (/** @type {?} */ (bottom)), right: (/** @type {?} */ (right)), width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @private\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    _setBoundingBoxStyles(origin, position) {\n        /** @type {?} */\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        const styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    _resetBoundingBoxStyles() {\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, (/** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        })));\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, (/** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        })));\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @private\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    _setOverlayElementStyles(originPoint, position) {\n        /** @type {?} */\n        const styles = (/** @type {?} */ ({}));\n        /** @type {?} */\n        const hasExactPosition = this._hasExactPosition();\n        /** @type {?} */\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        /** @type {?} */\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            /** @type {?} */\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        /** @type {?} */\n        let transformString = '';\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        /** @type {?} */\n        let styles = (/** @type {?} */ ({ top: '', bottom: '' }));\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            /** @type {?} */\n            const documentHeight = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        /** @type {?} */\n        let styles = (/** @type {?} */ ({ left: '', right: '' }));\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        /** @type {?} */\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            const documentWidth = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @private\n     * @return {?}\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        /** @type {?} */\n        const originBounds = this._getOriginRect();\n        /** @type {?} */\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        /** @type {?} */\n        const scrollContainerBounds = this._scrollables.map((/**\n         * @param {?} scrollable\n         * @return {?}\n         */\n        scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        }));\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from its length.\n     * @private\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((/**\n         * @param {?} currentValue\n         * @param {?} currentOverflow\n         * @return {?}\n         */\n        (currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }), length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @private\n     * @return {?}\n     */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        /** @type {?} */\n        const width = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        const height = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @private\n     * @return {?}\n     */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @private\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @private\n     * @return {?}\n     */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach((/**\n         * @param {?} pair\n         * @return {?}\n         */\n        pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        }));\n    }\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @private\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach((/**\n             * @param {?} cssClass\n             * @return {?}\n             */\n            cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            }));\n        }\n    }\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach((/**\n             * @param {?} cssClass\n             * @return {?}\n             */\n            cssClass => {\n                this._pane.classList.remove(cssClass);\n            }));\n            this._appliedPanelClasses = [];\n        }\n    }\n    /**\n     * Returns the ClientRect of the current origin.\n     * @private\n     * @return {?}\n     */\n    _getOriginRect() {\n        /** @type {?} */\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        /** @type {?} */\n        const width = origin.width || 0;\n        /** @type {?} */\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\nif (false) {\n    /**\n     * The overlay to which this strategy is attached.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._overlayRef;\n    /**\n     * Whether we're performing the very first positioning of the overlay.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._isInitialRender;\n    /**\n     * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._lastBoundingBoxSize;\n    /**\n     * Whether the overlay was pushed in a previous positioning.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._isPushed;\n    /**\n     * Whether the overlay can be pushed on-screen on the initial open.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._canPush;\n    /**\n     * Whether the overlay can grow via flexible width/height after the initial open.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._growAfterOpen;\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._hasFlexibleDimensions;\n    /**\n     * Whether the overlay position is locked.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._positionLocked;\n    /**\n     * Cached origin dimensions\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._originRect;\n    /**\n     * Cached overlay dimensions\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._overlayRect;\n    /**\n     * Cached viewport dimensions\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._viewportRect;\n    /**\n     * Amount of space that must be maintained between the overlay and the edge of the viewport.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._viewportMargin;\n    /**\n     * The Scrollable containers used to check scrollable view properties on position change.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._scrollables;\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @type {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._preferredPositions;\n    /**\n     * The origin element against which the overlay will be positioned.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._origin;\n    /**\n     * The overlay pane element.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._pane;\n    /**\n     * Whether the strategy has been disposed of already.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._isDisposed;\n    /**\n     * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n     * within the viewport.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._boundingBox;\n    /**\n     * The last position to have been calculated as the best fit position.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._lastPosition;\n    /**\n     * Subject that emits whenever the position changes.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._positionChanges;\n    /**\n     * Subscription to viewport size changes.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._resizeSubscription;\n    /**\n     * Default offset for the overlay along the x axis.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._offsetX;\n    /**\n     * Default offset for the overlay along the y axis.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._offsetY;\n    /**\n     * Selector to be used when finding the elements on which to set the transform origin.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._transformOriginSelector;\n    /**\n     * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._appliedPanelClasses;\n    /**\n     * Amount by which the overlay was pushed in each axis during the last time it was positioned.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._previousPushAmount;\n    /**\n     * Observable sequence of position changes.\n     * @type {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.positionChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._overlayContainer;\n}\n/**\n * A simple (x, y) coordinate.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Record of measurements for how an overlay (at a given position) fits into the viewport.\n * @record\n */\nfunction OverlayFit() { }\nif (false) {\n    /**\n     * Whether the overlay fits completely in the viewport.\n     * @type {?}\n     */\n    OverlayFit.prototype.isCompletelyWithinViewport;\n    /**\n     * Whether the overlay fits in the viewport on the y-axis.\n     * @type {?}\n     */\n    OverlayFit.prototype.fitsInViewportVertically;\n    /**\n     * Whether the overlay fits in the viewport on the x-axis.\n     * @type {?}\n     */\n    OverlayFit.prototype.fitsInViewportHorizontally;\n    /**\n     * The total visible area (in px^2) of the overlay inside the viewport.\n     * @type {?}\n     */\n    OverlayFit.prototype.visibleArea;\n}\n/**\n * Record of the measurments determining whether an overlay will fit in a specific position.\n * @record\n */\nfunction FallbackPosition() { }\nif (false) {\n    /** @type {?} */\n    FallbackPosition.prototype.position;\n    /** @type {?} */\n    FallbackPosition.prototype.originPoint;\n    /** @type {?} */\n    FallbackPosition.prototype.overlayPoint;\n    /** @type {?} */\n    FallbackPosition.prototype.overlayFit;\n    /** @type {?} */\n    FallbackPosition.prototype.overlayRect;\n}\n/**\n * Position and size of the overlay sizing wrapper for a specific position.\n * @record\n */\nfunction BoundingBoxRect() { }\nif (false) {\n    /** @type {?} */\n    BoundingBoxRect.prototype.top;\n    /** @type {?} */\n    BoundingBoxRect.prototype.left;\n    /** @type {?} */\n    BoundingBoxRect.prototype.bottom;\n    /** @type {?} */\n    BoundingBoxRect.prototype.right;\n    /** @type {?} */\n    BoundingBoxRect.prototype.height;\n    /** @type {?} */\n    BoundingBoxRect.prototype.width;\n}\n/**\n * Record of measures determining how well a given position will fit with flexible dimensions.\n * @record\n */\nfunction FlexibleFit() { }\nif (false) {\n    /** @type {?} */\n    FlexibleFit.prototype.position;\n    /** @type {?} */\n    FlexibleFit.prototype.origin;\n    /** @type {?} */\n    FlexibleFit.prototype.overlayRect;\n    /** @type {?} */\n    FlexibleFit.prototype.boundingBoxRect;\n}\n/**\n * A connected position as specified by the user.\n * @record\n */\nfunction ConnectedPosition() { }\nif (false) {\n    /** @type {?} */\n    ConnectedPosition.prototype.originX;\n    /** @type {?} */\n    ConnectedPosition.prototype.originY;\n    /** @type {?} */\n    ConnectedPosition.prototype.overlayX;\n    /** @type {?} */\n    ConnectedPosition.prototype.overlayY;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.weight;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.offsetX;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.offsetY;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.panelClass;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} destination\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n * @param {?} input\n * @return {?}\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/position/connected-position-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    /**\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?} connectedTo\n     * @param {?} viewportRuler\n     * @param {?} document\n     * @param {?} platform\n     * @param {?} overlayContainer\n     */\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {THIS}\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        (/** @type {?} */ (this))._preferredPositions.push(position);\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} dir New layout direction.\n     * @return {THIS}\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.setDirection(dir);\n        }\n        else {\n            (/** @type {?} */ (this))._direction = dir;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    withOffsetX(offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetX(offset);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    withOffsetY(offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetY(offset);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    withLockedPosition(isLocked) {\n        (/** @type {?} */ (this))._positionStrategy.withLockedPosition(isLocked);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {THIS}\n     */\n    withPositions(positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions.slice();\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin element.\n     * @return {THIS}\n     */\n    setOrigin(origin) {\n        (/** @type {?} */ (this))._positionStrategy.setOrigin(origin);\n        return (/** @type {?} */ (this));\n    }\n}\nif (false) {\n    /**\n     * Reference to the underlying position strategy to which all the API calls are proxied.\n     * \\@docs-private\n     * @type {?}\n     */\n    ConnectedPositionStrategy.prototype._positionStrategy;\n    /**\n     * The overlay to which this strategy is attached.\n     * @type {?}\n     * @private\n     */\n    ConnectedPositionStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ConnectedPositionStrategy.prototype._direction;\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @type {?}\n     */\n    ConnectedPositionStrategy.prototype._preferredPositions;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/position/global-position-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be added to the overlay pane wrapper.\n * @type {?}\n */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        /** @type {?} */\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New top offset.\n     * @return {THIS}\n     */\n    top(value = '') {\n        (/** @type {?} */ (this))._bottomOffset = '';\n        (/** @type {?} */ (this))._topOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-start';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New left offset.\n     * @return {THIS}\n     */\n    left(value = '') {\n        (/** @type {?} */ (this))._rightOffset = '';\n        (/** @type {?} */ (this))._leftOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-start';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New bottom offset.\n     * @return {THIS}\n     */\n    bottom(value = '') {\n        (/** @type {?} */ (this))._topOffset = '';\n        (/** @type {?} */ (this))._bottomOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-end';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New right offset.\n     * @return {THIS}\n     */\n    right(value = '') {\n        (/** @type {?} */ (this))._leftOffset = '';\n        (/** @type {?} */ (this))._rightOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-end';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New width for the overlay\n     * @return {THIS}\n     */\n    width(value = '') {\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ width: value });\n        }\n        else {\n            (/** @type {?} */ (this))._width = value;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New height for the overlay\n     * @return {THIS}\n     */\n    height(value = '') {\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ height: value });\n        }\n        else {\n            (/** @type {?} */ (this))._height = value;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {THIS}\n     */\n    centerHorizontally(offset = '') {\n        (/** @type {?} */ (this)).left(offset);\n        (/** @type {?} */ (this))._justifyContent = 'center';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {THIS}\n     */\n    centerVertically(offset = '') {\n        (/** @type {?} */ (this)).top(offset);\n        (/** @type {?} */ (this))._alignItems = 'center';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        /** @type {?} */\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        /** @type {?} */\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    }\n}\nif (false) {\n    /**\n     * The overlay to which this strategy is attached.\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._cssPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._topOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._bottomOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._leftOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._rightOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._alignItems;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._justifyContent;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._width;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._height;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._isDisposed;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/position/overlay-position-builder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nclass OverlayPositionBuilder {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?} _platform\n     * @param {?} _overlayContainer\n     */\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} origin Origin relative to which to position the overlay.\n     * @return {?}\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\n/** @nocollapse */\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n/** @nocollapse */ OverlayPositionBuilder.ɵprov = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._overlayContainer;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/overlay.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Next overlay unique ID.\n * @type {?}\n */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    /**\n     * @param {?} scrollStrategies\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _keyboardDispatcher\n     * @param {?} _injector\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?} _directionality\n     * @param {?=} _location\n     */\n    constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    create(config) {\n        /** @type {?} */\n        const host = this._createHostElement();\n        /** @type {?} */\n        const pane = this._createPaneElement(host);\n        /** @type {?} */\n        const portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @private\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    _createPaneElement(host) {\n        /** @type {?} */\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @private\n     * @return {?} Newly-create host element.\n     */\n    _createHostElement() {\n        /** @type {?} */\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @private\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8)); };\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\n/** @nocollapse */\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._appRef;\n    /**\n     * Scrolling strategies that can be used when creating an overlay.\n     * @type {?}\n     */\n    Overlay.prototype.scrollStrategies;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._overlayContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._positionBuilder;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._keyboardDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._directionality;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._location;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/overlay-directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n * @type {?}\n */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n * @type {?}\n */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @param {?=} config\n     * @return {?}\n     */\n    (config) => overlay.scrollStrategies.reposition(config));\n}\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\n/** @nocollapse */\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /**\n     * Reference to the element on which the directive is applied.\n     * @type {?}\n     */\n    CdkOverlayOrigin.prototype.elementRef;\n}\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} scrollStrategyFactory\n     * @param {?} _dir\n     */\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the x-axis\n     * @return {?}\n     */\n    get offsetX() { return this._offsetX; }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n    get offsetY() { return this._offsetY; }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n    get lockPosition() { return this._lockPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n    get growAfterOpen() { return this._growAfterOpen; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n    get push() { return this._push; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /**\n     * Creates an overlay\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        }));\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @private\n     * @return {?}\n     */\n    _buildConfig() {\n        /** @type {?} */\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _updatePositionStrategy(positionStrategy) {\n        /** @type {?} */\n        const positions = this.positions.map((/**\n         * @param {?} currentPosition\n         * @return {?}\n         */\n        currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        })));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @private\n     * @return {?}\n     */\n    _createPositionStrategy() {\n        /** @type {?} */\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe((/**\n         * @param {?} p\n         * @return {?}\n         */\n        p => this.positionChange.emit(p)));\n        return strategy;\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                this.backdropClick.emit(event);\n            }));\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkConnectedOverlay.ngAcceptInputType_hasBackdrop;\n    /** @type {?} */\n    CdkConnectedOverlay.ngAcceptInputType_lockPosition;\n    /** @type {?} */\n    CdkConnectedOverlay.ngAcceptInputType_flexibleDimensions;\n    /** @type {?} */\n    CdkConnectedOverlay.ngAcceptInputType_growAfterOpen;\n    /** @type {?} */\n    CdkConnectedOverlay.ngAcceptInputType_push;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._templatePortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._hasBackdrop;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._lockPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._growAfterOpen;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._flexibleDimensions;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._push;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._backdropSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._offsetX;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._offsetY;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._position;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._scrollStrategyFactory;\n    /**\n     * Origin for the connected overlay.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.origin;\n    /**\n     * Registered connected position pairs.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.positions;\n    /**\n     * This input overrides the positions input if specified. It lets users pass\n     * in arbitrary positioning strategies.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.positionStrategy;\n    /**\n     * The width of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.width;\n    /**\n     * The height of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.height;\n    /**\n     * The min width of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.minWidth;\n    /**\n     * The min height of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.minHeight;\n    /**\n     * The custom class to be set on the backdrop element.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.backdropClass;\n    /**\n     * The custom class to add to the overlay pane element.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.panelClass;\n    /**\n     * Margin between the overlay and the viewport edges.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.viewportMargin;\n    /**\n     * Strategy to be used when handling scroll events while the overlay is open.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.scrollStrategy;\n    /**\n     * Whether the overlay is open.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.open;\n    /**\n     * CSS selector which to set the transform origin.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.transformOriginSelector;\n    /**\n     * Event emitted when the backdrop is clicked.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.backdropClick;\n    /**\n     * Event emitted when the position has changed.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.positionChange;\n    /**\n     * Event emitted when the overlay has been attached.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.attach;\n    /**\n     * Event emitted when the overlay has been detached.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.detach;\n    /**\n     * Emits when there are keyboard events that are targeted at the overlay.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.overlayKeydown;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._dir;\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/overlay-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass OverlayModule {\n}\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverlayModule_Factory(t) { return new (t || OverlayModule)(); }, providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule],\n        ScrollingModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay,\n        CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay,\n        CdkOverlayOrigin,\n        ScrollingModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/fullscreen-overlay-container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    /**\n     * @param {?} _document\n     * @param {?=} platform\n     */\n    constructor(_document, \n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    platform) {\n        super(_document, platform);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener((/**\n         * @return {?}\n         */\n        () => this._adjustParentForFullscreenChange()));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        const fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _addFullscreenChangeListener(fn) {\n        /** @type {?} */\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            /** @type {?} */\n            const _document = (/** @type {?} */ (this._document));\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    getFullscreenElement() {\n        /** @type {?} */\n        const _document = (/** @type {?} */ (this._document));\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\n/** @nocollapse */\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/** @nocollapse */ FullscreenOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    FullscreenOverlayContainer.prototype._fullScreenEventName;\n    /**\n     * @type {?}\n     * @private\n     */\n    FullscreenOverlayContainer.prototype._fullScreenListener;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/overlay/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, OVERLAY_PROVIDERS, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_a, OVERLAY_CONTAINER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_c, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_d, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_e, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_f, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_g };\n\n//# sourceMappingURL=overlay.js.map","import { ElementRef, Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/portal-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/portal.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface that can be used to generically type a class.\n * @record\n * @template T\n */\nfunction ComponentType() { }\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return (/** @type {?} */ (host.attach(this)));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Portal.prototype._attachedHost;\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\nif (false) {\n    /**\n     * The type of the component that will be instantiated for attachment.\n     * @type {?}\n     */\n    ComponentPortal.prototype.component;\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalOutlet.\n     * The origin is necessary when the host is outside of the Angular application context.\n     * @type {?}\n     */\n    ComponentPortal.prototype.viewContainerRef;\n    /**\n     * [Optional] Injector used for the instantiation of the component.\n     * @type {?}\n     */\n    ComponentPortal.prototype.injector;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * Defaults to using the resolver from the outlet that the portal is attached to.\n     * @type {?}\n     */\n    ComponentPortal.prototype.componentFactoryResolver;\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\nif (false) {\n    /**\n     * The embedded template that will be used to instantiate an embedded View in the host.\n     * @type {?}\n     */\n    TemplatePortal.prototype.templateRef;\n    /**\n     * Reference to the ViewContainer into which the template will be stamped out.\n     * @type {?}\n     */\n    TemplatePortal.prototype.viewContainerRef;\n    /**\n     * Contextual data to be passed in to the embedded view.\n     * @type {?}\n     */\n    TemplatePortal.prototype.context;\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n * @template T\n */\nclass DomPortal extends Portal {\n    /**\n     * @param {?} element\n     */\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\nif (false) {\n    /**\n     * DOM node hosting the portal's content.\n     * @type {?}\n     */\n    DomPortal.prototype.element;\n}\n/**\n * A `PortalOutlet` is an space that can contain a single `Portal`.\n * @record\n */\nfunction PortalOutlet() { }\nif (false) {\n    /**\n     * Attaches a portal to this outlet.\n     * @param {?} portal\n     * @return {?}\n     */\n    PortalOutlet.prototype.attach = function (portal) { };\n    /**\n     * Detaches the currently attached portal from this outlet.\n     * @return {?}\n     */\n    PortalOutlet.prototype.detach = function () { };\n    /**\n     * Performs cleanup before the outlet is destroyed.\n     * @return {?}\n     */\n    PortalOutlet.prototype.dispose = function () { };\n    /**\n     * Whether there is currently a portal attached to this outlet.\n     * @return {?}\n     */\n    PortalOutlet.prototype.hasAttached = function () { };\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * The portal currently attached to the host.\n     * @type {?}\n     * @protected\n     */\n    BasePortalOutlet.prototype._attachedPortal;\n    /**\n     * A function that will permanently dispose this host.\n     * @type {?}\n     * @private\n     */\n    BasePortalOutlet.prototype._disposeFn;\n    /**\n     * Whether this host has already been permanently disposed.\n     * @type {?}\n     * @private\n     */\n    BasePortalOutlet.prototype._isDisposed;\n    /** @type {?} */\n    BasePortalOutlet.prototype.attachDomPortal;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attachComponentPortal = function (portal) { };\n    /**\n     * @abstract\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attachTemplatePortal = function (portal) { };\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * \\@breaking-change 9.0.0\n * @abstract\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/dom-portal-outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     * @param {?=} _document\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * \\@breaking-change 10.0.0\n         */\n        this.attachDomPortal = (/**\n         * @param {?} portal\n         * @return {?}\n         */\n        (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            /** @type {?} */\n            const element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            /** @type {?} */\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            super.setDisposeFn((/**\n             * @return {?}\n             */\n            () => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            }));\n        });\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => componentRef.destroy()));\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            }));\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach((/**\n         * @param {?} rootNode\n         * @return {?}\n         */\n        rootNode => this.outletElement.appendChild(rootNode)));\n        this.setDisposeFn(((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        })));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._document;\n    /**\n     * Attaches a DOM portal by transferring its content into the outlet.\n     * \\@param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    DomPortalOutlet.prototype.attachDomPortal;\n    /**\n     * Element into which the content is projected.\n     * @type {?}\n     */\n    DomPortalOutlet.prototype.outletElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._appRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._defaultInjector;\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/portal-directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdkPortal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/**\n * @deprecated Use `CdkPortal` instead.\n * \\@breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = function TemplatePortalDirective_Factory(t) { return ɵTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective); };\nTemplatePortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TemplatePortalDirective, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵTemplatePortalDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TemplatePortalDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            }]\n    }], null, null); })();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     * @param {?=} _document\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        /**\n         * Emits when a portal is attached to the outlet.\n         */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * \\@breaking-change 10.0.0\n         */\n        this.attachDomPortal = (/**\n         * @param {?} portal\n         * @return {?}\n         */\n        (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            /** @type {?} */\n            const element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            /** @type {?} */\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            super.setDisposeFn((/**\n             * @return {?}\n             */\n            () => {\n                if (anchorNode.parentNode) {\n                    (/** @type {?} */ (anchorNode.parentNode)).replaceChild(element, anchorNode);\n                }\n            }));\n        });\n        this._document = _document;\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(((/** @type {?} */ (ref.hostView))).rootNodes[0]);\n        }\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => ref.destroy()));\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => this._viewContainerRef.clear()));\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /**\n     * Gets the root node of the portal outlet.\n     * @private\n     * @return {?}\n     */\n    _getRootNode() {\n        /** @type {?} */\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (/** @type {?} */ ((nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n            nativeElement : (/** @type {?} */ (nativeElement.parentNode)))));\n    }\n}\nCdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkPortalOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { attached: [{\n            type: Output\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkPortalOutlet.ngAcceptInputType_portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._document;\n    /**\n     * Whether the portal component is initialized.\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._isInitialized;\n    /**\n     * Reference to the currently-attached component/view ref.\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._attachedRef;\n    /**\n     * Emits when a portal is attached to the outlet.\n     * @type {?}\n     */\n    CdkPortalOutlet.prototype.attached;\n    /**\n     * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n     * \\@param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    CdkPortalOutlet.prototype.attachDomPortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._viewContainerRef;\n}\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = function PortalHostDirective_Factory(t) { return ɵPortalHostDirective_BaseFactory(t || PortalHostDirective); };\nPortalHostDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortalHostDirective, selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, exportAs: [\"cdkPortalHost\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵPortalHostDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PortalHostDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            }]\n    }], null, null); })();\nclass PortalModule {\n}\nPortalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PortalModule });\nPortalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PortalModule_Factory(t) { return new (t || PortalModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PortalModule, { declarations: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective], exports: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/portal-injector.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PortalInjector.prototype._parentInjector;\n    /**\n     * @type {?}\n     * @private\n     */\n    PortalInjector.prototype._customTokens;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/portal/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n\n//# sourceMappingURL=portal.js.map","import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, merge, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-scroll-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * A strategy that dictates which items should be rendered in the viewport.\n * @record\n */\nfunction VirtualScrollStrategy() { }\nif (false) {\n    /**\n     * Emits when the index of the first element visible in the viewport changes.\n     * @type {?}\n     */\n    VirtualScrollStrategy.prototype.scrolledIndexChange;\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.attach = function (viewport) { };\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.detach = function () { };\n    /**\n     * Called when the viewport is scrolled (debounced using requestAnimationFrame).\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onContentScrolled = function () { };\n    /**\n     * Called when the length of the data changes.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onDataLengthChanged = function () { };\n    /**\n     * Called when the range of items rendered in the DOM has changed.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onContentRendered = function () { };\n    /**\n     * Called when the offset of the rendered items changed.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () { };\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/fixed-size-virtual-scroll.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentRendered() { }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        const scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        const renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        const viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        const dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._scrolledIndexChange;\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @type {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.scrolledIndexChange;\n    /**\n     * The attached viewport.\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._viewport;\n    /**\n     * The size of the items in the virtually scrolling list.\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._itemSize;\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._minBufferPx;\n    /**\n     * The number of buffer items to render beyond the edge of the viewport (in pixels).\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._maxBufferPx;\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n    get itemSize() { return this._itemSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(( /**\n                         * @return {?}\n                         */() => CdkFixedSizeVirtualScroll))]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(( /**\n                                 * @return {?}\n                                 */() => CdkFixedSizeVirtualScroll))]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.ngAcceptInputType_itemSize;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.ngAcceptInputType_minBufferPx;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.ngAcceptInputType_maxBufferPx;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.prototype._itemSize;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.prototype._minBufferPx;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.prototype._maxBufferPx;\n    /**\n     * The scroll strategy used by this directive.\n     * @type {?}\n     */\n    CdkFixedSizeVirtualScroll.prototype._scrollStrategy;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scroll-dispatcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?=} document\n     */\n    constructor(_ngZone, _platform, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next(scrollable))));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        /** @type {?} */\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            /** @type {?} */\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            });\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((/**\n         * @param {?} _\n         * @param {?} container\n         * @return {?}\n         */\n        (_, container) => this.deregister(container)));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter((/**\n         * @param {?} target\n         * @return {?}\n         */\n        target => {\n            return !target || ancestors.indexOf(target) > -1;\n        })));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        /** @type {?} */\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((/**\n         * @param {?} _subscription\n         * @param {?} scrollable\n         * @return {?}\n         */\n        (_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        }));\n        return scrollingContainers;\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n    _getDocument() {\n        return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        /** @type {?} */\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        let element = elementRef.nativeElement;\n        /** @type {?} */\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = (/** @type {?} */ (element)).parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next()));\n        }));\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * Used to reference correct document/window\n     * @type {?}\n     * @protected\n     */\n    ScrollDispatcher.prototype._document;\n    /**\n     * Subject for notifying that a registered scrollable reference element has been scrolled.\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._scrolled;\n    /**\n     * Keeps track of the global `scroll` and `resize` subscriptions.\n     * @type {?}\n     */\n    ScrollDispatcher.prototype._globalSubscription;\n    /**\n     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._scrolledCount;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     * @type {?}\n     */\n    ScrollDispatcher.prototype.scrollContainers;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._platform;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scrollable.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    scrollTo(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            ((/** @type {?} */ (options))).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                ((/** @type {?} */ (options))).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                ((/** @type {?} */ (options))).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    _applyScrollToOptions(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        /** @type {?} */\n        const LEFT = 'left';\n        /** @type {?} */\n        const RIGHT = 'right';\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkScrollable.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkScrollable.prototype._elementScrolled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.scrollDispatcher;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.ngZone;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/viewport-ruler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Object that holds the scroll position of the viewport in each direction.\n * @record\n */\nfunction ViewportScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ViewportScrollPosition.prototype.top;\n    /** @type {?} */\n    ViewportScrollPosition.prototype.left;\n}\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     * @param {?=} document\n     */\n    constructor(_platform, ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._platform = _platform;\n        this._document = document;\n        ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const window = this._getWindow();\n            this._change = _platform.isBrowser ?\n                merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                of();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe((/**\n             * @return {?}\n             */\n            () => this._updateViewportSize()));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = (/** @type {?} */ (null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        /** @type {?} */\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        /** @type {?} */\n        const document = this._getDocument();\n        /** @type {?} */\n        const window = this._getWindow();\n        /** @type {?} */\n        const documentElement = (/** @type {?} */ (document.documentElement));\n        /** @type {?} */\n        const documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n    _getDocument() {\n        return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        /** @type {?} */\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n    _updateViewportSize() {\n        /** @type {?} */\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ViewportRuler.ɵprov = ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * Cached viewport dimensions.\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._viewportSize;\n    /**\n     * Stream of viewport change events.\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._change;\n    /**\n     * Subscription to streams that invalidate the cached viewport dimensions.\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._invalidateCache;\n    /**\n     * Used to reference correct document/window\n     * @type {?}\n     * @protected\n     */\n    ViewportRuler.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._platform;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-scroll-viewport.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/**\n * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     * @param {?=} viewportRuler\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, \n    /**\n     * @deprecated `viewportRuler` parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        this._detachedSubject = new Subject();\n        /**\n         * Emits when the rendered range changes.\n         */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        this.scrolledIndexChange = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this._scrollStrategy.scrolledIndexChange.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => this.ngZone.run((/**\n         * @return {?}\n         */\n        () => observer.next(index)))))))));\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /**\n         * A string representing the `style.width` property value to be used for the spacer element.\n         */\n        this._totalContentWidth = '';\n        /**\n         * A string representing the `style.height` property value to be used for the spacer element.\n         */\n        this._totalContentHeight = '';\n        /**\n         * The currently rendered range of indices.\n         */\n        this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        this._runAfterChangeDetection = [];\n        /**\n         * Subscription to changes in the viewport size.\n         */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n        if (viewportRuler) {\n            this._viewportChanges = viewportRuler.change().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.checkViewportSize();\n            }));\n        }\n    }\n    /**\n     * The direction the viewport scrolls.\n     * @return {?}\n     */\n    get orientation() {\n        return this._orientation;\n    }\n    /**\n     * @param {?} orientation\n     * @return {?}\n     */\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith((/** @type {?} */ (null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentScrolled()));\n            this._markChangeDetectionNeeded();\n        }))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => {\n                /** @type {?} */\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            }));\n        }));\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentRendered()));\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        const isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        const axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            }));\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        /** @type {?} */\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        return from ?\n            super.measureScrollOffset(from) :\n            super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    measureRenderedContentSize() {\n        /** @type {?} */\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n    _measureViewportSize() {\n        /** @type {?} */\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                this._doChangeDetection();\n            }))));\n        }\n    }\n    /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n        /** @type {?} */\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /**\n     * Calculates the `style.width` and `style.height` for the spacer element.\n     * @private\n     * @return {?}\n     */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler, 8)); };\nCdkVirtualScrollViewport.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    } }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkScrollable,\n                useExisting: CdkVirtualScrollViewport\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher },\n    { type: ViewportRuler, decorators: [{ type: Optional }] }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport',\n                template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport\n                    }],\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }, { type: ViewportRuler, decorators: [{\n                type: Optional\n            }] }]; }, { scrolledIndexChange: [{\n            type: Output\n        }], orientation: [{\n            type: Input\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper', { static: true }]\n        }] }); })();\nif (false) {\n    /**\n     * Emits when the viewport is detached from a CdkVirtualForOf.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._detachedSubject;\n    /**\n     * Emits when the rendered range changes.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedRangeSubject;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._orientation;\n    /**\n     * Emits when the index of the first element visible in the viewport changes.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype.scrolledIndexChange;\n    /**\n     * The element that wraps the rendered content.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype._contentWrapper;\n    /**\n     * A stream that emits whenever the rendered range changes.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype.renderedRangeStream;\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._totalContentSize;\n    /**\n     * A string representing the `style.width` property value to be used for the spacer element.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype._totalContentWidth;\n    /**\n     * A string representing the `style.height` property value to be used for the spacer element.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype._totalContentHeight;\n    /**\n     * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n     * of the visible viewport.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedContentTransform;\n    /**\n     * The currently rendered range of indices.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedRange;\n    /**\n     * The length of the data bound to this viewport (in number of items).\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._dataLength;\n    /**\n     * The size of the viewport (in pixels).\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._viewportSize;\n    /**\n     * the currently attached CdkVirtualForOf.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._forOf;\n    /**\n     * The last rendered content offset that was set.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedContentOffset;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedContentOffsetNeedsRewrite;\n    /**\n     * Whether there is a pending change detection cycle.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._isChangeDetectionPending;\n    /**\n     * A list of functions to run after the next change detection cycle.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._runAfterChangeDetection;\n    /**\n     * Subscription to changes in the viewport size.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._viewportChanges;\n    /** @type {?} */\n    CdkVirtualScrollViewport.prototype.elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._scrollStrategy;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-for-of.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    const el = (/** @type {?} */ (node));\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new Subject();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith((/** @type {?} */ (null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([prev, cur]) => this._changeDataSource(prev, cur))), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        }));\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} range\n         * @return {?}\n         */\n        range => {\n            this._renderedRange = range;\n            ngZone.run((/**\n             * @return {?}\n             */\n            () => this.viewChange.next(this._renderedRange)));\n            this._onRenderedDataChange();\n        }));\n        this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (/**\n             * @param {?} index\n             * @param {?} item\n             * @return {?}\n             */\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)) :\n            undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        /** @type {?} */\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        /** @type {?} */\n        const rangeLen = range.end - range.start;\n        // Loop over all root nodes for all items in the range and sum up their size.\n        /** @type {?} */\n        let totalSize = 0;\n        /** @type {?} */\n        let i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex)));\n            /** @type {?} */\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, (/** @type {?} */ (view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            /** @type {?} */\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n    _updateContext() {\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            let view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                // Item added.\n                /** @type {?} */\n                const view = this._insertViewForNewItem((/** @type {?} */ (currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._cacheView(this._detachView((/** @type {?} */ (adjustedPreviousIndex))));\n            }\n            else { // Item moved.\n                // Item moved.\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (adjustedPreviousIndex)))));\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        }));\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (record.currentIndex)))));\n            view.context.$implicit = record.item;\n        }));\n        // Update the context variables on all items.\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewForNewItem(index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _createEmbeddedViewAt(index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: (/** @type {?} */ (null)),\n            // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n            // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n            cdkVirtualForOf: (/** @type {?} */ (this._cdkVirtualForOf)),\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        }, index);\n    }\n    /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewFromCache(index) {\n        /** @type {?} */\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _detachView(index) {\n        return (/** @type {?} */ (this._viewContainerRef.detach(index)));\n    }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\", cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\" } });\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }], cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Emits when the rendered view of the data changes.\n     * @type {?}\n     */\n    CdkVirtualForOf.prototype.viewChange;\n    /**\n     * Subject that emits when a new DataSource instance is given.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._dataSourceChanges;\n    /** @type {?} */\n    CdkVirtualForOf.prototype._cdkVirtualForOf;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._cdkVirtualForTrackBy;\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     * @type {?}\n     */\n    CdkVirtualForOf.prototype.cdkVirtualForTemplateCacheSize;\n    /**\n     * Emits whenever the data in the current DataSource changes.\n     * @type {?}\n     */\n    CdkVirtualForOf.prototype.dataStream;\n    /**\n     * The differ used to calculate changes to the data.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._differ;\n    /**\n     * The most recent data emitted from the DataSource.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._data;\n    /**\n     * The currently rendered items.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._renderedItems;\n    /**\n     * The currently rendered range of indices.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._renderedRange;\n    /**\n     * The template cache used to hold on ot template instancess that have been stamped out, but don't\n     * currently need to be rendered. These instances will be reused in the future rather than\n     * stamping out brand new ones.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._templateCache;\n    /**\n     * Whether the rendered data should be updated during the next ngDoCheck cycle.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._needsUpdate;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._destroyed;\n    /**\n     * The view container to add items to.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._viewContainerRef;\n    /**\n     * The template to use when stamping out new items.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._template;\n    /**\n     * The set of available differs.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._differs;\n    /**\n     * The virtual scrolling viewport that these items are being rendered in.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._viewport;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scrolling-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); }, imports: [[BidiModule, PlatformModule],\n        BidiModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll,\n        CdkScrollable,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule, PlatformModule]; }, exports: function () { return [BidiModule,\n        CdkFixedSizeVirtualScroll,\n        CdkScrollable,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PlatformModule],\n                exports: [\n                    BidiModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkScrollable,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n\n//# sourceMappingURL=scrolling.js.map","import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Possible overrides for a dialog's position.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nfunction DialogPosition() { }\nif (false) {\n    /**\n     * Override for the dialog's top position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.top;\n    /**\n     * Override for the dialog's bottom position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.bottom;\n    /**\n     * Override for the dialog's left position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.left;\n    /**\n     * Override for the dialog's right position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.right;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nclass MatDialogConfig {\n    constructor() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop.\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking on the backdrop to close the modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n         */\n        this.maxWidth = '80vw';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        /**\n         * ID of the element that labels the dialog.\n         */\n        this.ariaLabelledBy = null;\n        /**\n         * Aria label to assign to the dialog element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Whether the dialog should focus the first focusable element on open.\n         */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\nif (false) {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.viewContainerRef;\n    /**\n     * ID for the dialog. If omitted, a unique one will be generated.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.id;\n    /**\n     * The ARIA role of the dialog element.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.role;\n    /**\n     * Custom class for the overlay pane.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.panelClass;\n    /**\n     * Whether the dialog has a backdrop.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.hasBackdrop;\n    /**\n     * Custom class for the backdrop.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.backdropClass;\n    /**\n     * Whether the user can use escape or clicking on the backdrop to close the modal.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.disableClose;\n    /**\n     * Width of the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.width;\n    /**\n     * Height of the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.height;\n    /**\n     * Min-width of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.minWidth;\n    /**\n     * Min-height of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.minHeight;\n    /**\n     * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.maxWidth;\n    /**\n     * Max-height of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.maxHeight;\n    /**\n     * Position overrides.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.position;\n    /**\n     * Data being injected into the child component.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.data;\n    /**\n     * Layout direction for the dialog's content.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.direction;\n    /**\n     * ID of the element that describes the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaDescribedBy;\n    /**\n     * ID of the element that labels the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaLabelledBy;\n    /**\n     * Aria label to assign to the dialog element.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaLabel;\n    /**\n     * Whether the dialog should focus the first focusable element on open.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.autoFocus;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.restoreFocus;\n    /**\n     * Scroll strategy to be used for the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.scrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     * @type {?}\n     */\n    MatDialogConfig.prototype.closeOnNavigation;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.componentFactoryResolver;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\nconst matDialogAnimations = {\n    /**\n     * Animation that is applied on the dialog container by defalt.\n     */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        this._state = 'enter';\n        /**\n         * Emits when an animation state changes.\n         */\n        this._animationStateChanged = new EventEmitter();\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * \\@breaking-change 10.0.0\n         */\n        this.attachDomPortal = (/**\n         * @param {?} portal\n         * @return {?}\n         */\n        (portal) => {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachDomPortal(portal);\n        });\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @private\n     * @return {?}\n     */\n    _trapFocus() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(element);\n        }\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else {\n            /** @type {?} */\n            const activeElement = this._document.activeElement;\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            if (activeElement !== element && !element.contains(activeElement)) {\n                element.focus();\n            }\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        /** @type {?} */\n        const toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            /** @type {?} */\n            const activeElement = this._document.activeElement;\n            /** @type {?} */\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                toFocus.focus();\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @private\n     * @return {?}\n     */\n    _savePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = (/** @type {?} */ (this._document.activeElement));\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._elementRef.nativeElement.focus()));\n            }\n        }\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig)); };\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], viewQuery: function MatDialogContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig }\n];\nMatDialogContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._document;\n    /**\n     * The portal outlet inside of this container into which the dialog content will be loaded.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._portalOutlet;\n    /**\n     * The class that traps and manages focus within the dialog.\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._focusTrap;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n    /**\n     * State of the dialog animation.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._state;\n    /**\n     * Emits when an animation state changes.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._animationStateChanged;\n    /**\n     * ID of the element that should be considered as the dialog's label.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._ariaLabelledBy;\n    /**\n     * ID for the container DOM element.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._id;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * \\@param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatDialogContainer.prototype.attachDomPortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._focusTrapFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._changeDetectorRef;\n    /**\n     * The dialog configuration.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n/** @type {?} */\nlet uniqueId = 0;\n/** @enum {number} */\nconst MatDialogState = {\n    OPEN: 0, CLOSING: 1, CLOSED: 2,\n};\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     * @param {?=} id\n     */\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClosed = new Subject();\n        /**\n         * Current state of the dialog.\n         */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'enter')), take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }));\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'exit')), take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.detachments().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = (/** @type {?} */ (null));\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.keydownEvents()\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.preventDefault();\n            this.close();\n        }));\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'start')), take(1))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._state = 2 /* CLOSED */;\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._overlayRef.dispose();\n            }), event.totalTime + 100);\n        }));\n        this._containerInstance._startExitAnimation();\n        this._state = 1 /* CLOSING */;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} position New dialog position.\n     * @return {THIS}\n     */\n    updatePosition(position) {\n        /** @type {?} */\n        let strategy = (/** @type {?} */ (this))._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {THIS}\n     */\n    updateSize(width = '', height = '') {\n        (/** @type {?} */ (this))._getPositionStrategy().width(width).height(height);\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    addPanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.addPanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    removePanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.removePanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the current state of the dialog's lifecycle.\n     * @return {?}\n     */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @private\n     * @return {?}\n     */\n    _getPositionStrategy() {\n        return (/** @type {?} */ (this._overlayRef.getConfig().positionStrategy));\n    }\n}\nif (false) {\n    /**\n     * The instance of component opened into the dialog.\n     * @type {?}\n     */\n    MatDialogRef.prototype.componentInstance;\n    /**\n     * Whether the user is allowed to close the dialog.\n     * @type {?}\n     */\n    MatDialogRef.prototype.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._afterOpened;\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._afterClosed;\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._beforeClosed;\n    /**\n     * Result to be passed to afterClosed.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._result;\n    /**\n     * Handle to the timeout that's running as a fallback in case the exit animation doesn't fire.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._closeFallbackTimeout;\n    /**\n     * Current state of the dialog.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._state;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._overlayRef;\n    /** @type {?} */\n    MatDialogRef.prototype._containerInstance;\n    /** @type {?} */\n    MatDialogRef.prototype.id;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    constructor(_overlay, _injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => this.openDialogs.length ?\n            this._afterAllClosed :\n            this._afterAllClosed.pipe(startWith(undefined))))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * @return {?}\n     */\n    get _afterAllClosed() {\n        /** @type {?} */\n        const parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        /** @type {?} */\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        () => this._removeOpenDialog(dialogRef)));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n    getDialogById(id) {\n        return this.openDialogs.find((/**\n         * @param {?} dialog\n         * @return {?}\n         */\n        dialog => dialog.id === id));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @private\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @private\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        /** @type {?} */\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @private\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        /** @type {?} */\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @private\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        /** @type {?} */\n        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n        // When the dialog backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef.backdropClick().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (!dialogRef.disableClose) {\n                    dialogRef.close();\n                }\n            }));\n        }\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, (/** @type {?} */ (null)), (/** @type {?} */ ({ $implicit: config.data, dialogRef }))));\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            /** @type {?} */\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @private\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n        // added to the injection tokens.\n        /** @type {?} */\n        const providers = [\n            { provide: MatDialogContainer, useValue: dialogContainer },\n            { provide: MAT_DIALOG_DATA, useValue: config.data },\n            { provide: MatDialogRef, useValue: dialogRef }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @private\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    _removeOpenDialog(dialogRef) {\n        /** @type {?} */\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((/**\n                 * @param {?} previousValue\n                 * @param {?} element\n                 * @return {?}\n                 */\n                (previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                }));\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @private\n     * @return {?}\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        /** @type {?} */\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            /** @type {?} */\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                /** @type {?} */\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @private\n     * @param {?} dialogs\n     * @return {?}\n     */\n    _closeDialogs(dialogs) {\n        /** @type {?} */\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\n/** @nocollapse */\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._openDialogsAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._afterAllClosedAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._afterOpenedAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._ariaHiddenElements;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._scrollStrategy;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     * @type {?}\n     */\n    MatDialog.prototype.afterAllClosed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._defaultOptions;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._parentDialog;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._overlayContainer;\n}\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-content-directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /**\n         * Default to \"button\" to prevents accidental form submits.\n         */\n        this.type = 'button';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() { return ctx.dialogRef.close(ctx.dialogResult); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\nif (false) {\n    /**\n     * Screenreader label for the button.\n     * @type {?}\n     */\n    MatDialogClose.prototype.ariaLabel;\n    /**\n     * Default to \"button\" to prevents accidental form submits.\n     * @type {?}\n     */\n    MatDialogClose.prototype.type;\n    /**\n     * Dialog close input.\n     * @type {?}\n     */\n    MatDialogClose.prototype.dialogResult;\n    /** @type {?} */\n    MatDialogClose.prototype._matDialogClose;\n    /** @type {?} */\n    MatDialogClose.prototype.dialogRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogClose.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogClose.prototype._dialog;\n}\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            }));\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatDialogTitle.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._dialogRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._dialog;\n}\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n    /** @type {?} */\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find((/**\n     * @param {?} dialog\n     * @return {?}\n     */\n    dialog => dialog.id === (/** @type {?} */ (parent)).id)) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); }, providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n//# sourceMappingURL=dialog.js.map","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { JobsComponent } from './jobs/jobs.component';\n\n\nconst routes: Routes = [\n  {path:'',component:JobsComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class JobsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { JobsRoutingModule } from './jobs-routing.module';\nimport { JobsComponent } from './jobs/jobs.component';\nimport { CoreModule } from 'src/app/core/core.module';\nimport {JobService} from '../../../services/job.service';\nimport { ResumeComponent } from './resume/resume.component';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\n\n\n@NgModule({\n  declarations: [JobsComponent, ResumeComponent],\n  imports: [\n    CommonModule,\n    JobsRoutingModule,\n    CoreModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  providers:[\n    JobService\n  ]\n})\nexport class JobsModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {JobService} from '../../../../services/job.service';\nimport {Job} from '../../../../modals/job';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ResumeComponent} from '../resume/resume.component';\n\n@Component({\n  selector: 'app-jobs',\n  templateUrl: './jobs.component.html',\n  styleUrls: ['./jobs.component.scss']\n})\nexport class JobsComponent implements OnInit {\n  data: Array<Job> = []\n  loading: boolean = true;\n  constructor(private service: JobService,\n              public dialog: MatDialog,) { }\n\n  ngOnInit(): void {\n    this.getJobs()\n  }\n\n  getJobs(){\n    this.service.getAll().subscribe((res:any) =>{\n      if(res.data){\n        this.loading = false;\n        this.data = res.data;\n      }\n    })\n  }\n\n  resume() {\n    this.dialog.open(ResumeComponent, {\n      width: '600px',\n    });\n  }\n}\n","<app-second-header></app-second-header>\n\n<app-loading *ngIf=\"loading\"></app-loading>\n\n<div class=\"container mt-5\" *ngIf=\"data\">\n    <div class=\"col-md-12\" *ngFor=\"let item of data\">\n        <div class=\"row\">\n            <div class=\"each-job\">\n                <div class=\"d-flex  justify-content-between\">\n                    <div class=\"job-title\">\n                        {{item.title}}\n                    </div>\n\n                    <button class=\"resume\" (click)=\"resume()\">\n                        ارسال رزومه\n                    </button>\n                </div>\n\n                <div class=\"d-flex mb-3\">\n                    <img src=\"/assets/img/pin.svg\" class=\"ml-2\" style=\"width: 20px;height: 20px\">\n\n                    زنجان- زنجان\n                </div>\n\n                <div class=\"d-flex\">\n                    <img src=\"/assets/img/portfolio.svg\" class=\"ml-2\" style=\"width: 20px;height: 20px\">\n\n                    قرار داد {{item.type}}\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<div class=\"container mt-5\" *ngIf=\"data.length <= 0\">\n  <div class=\"col-md-12 text-center\">\n    <div class=\"alert text-center \">\n      موردی یافت نشد\n    </div>\n  </div>\n</div>\n<app-footer></app-footer>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-resume',\n  templateUrl: './resume.component.html',\n  styleUrls: ['./resume.component.scss']\n})\nexport class ResumeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<form>\n  <br />\n  <div class=\"col-md-12\">\n    <div class=\"row\">\n      <div class=\"col-md-6 pr-0\">\n        <mat-form-field class=\"w-100\">\n          <mat-label>نام - نام خانوادگی</mat-label>\n          <input matInput>\n        </mat-form-field>\n      </div>\n\n      <div class=\"col-md-6 pl-0\">\n        <mat-form-field class=\"w-100\">\n          <mat-label>ایمیل</mat-label>\n          <input matInput>\n        </mat-form-field>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-md-12\">\n    <div class=\"row\">\n      <div class=\"col-md-6 pr-0\">\n        <mat-form-field class=\"w-100\">\n          <mat-label>شماره تماس</mat-label>\n          <input matInput>\n        </mat-form-field>\n      </div>\n      <div class=\"col-md-6 pl-0\">\n        <button class=\"resume\" (click)=\"file.click()\">\n          فایل رزومه\n\n          <input type=\"file\" #file style=\"display:none;\">\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"col-md-12\">\n    <div class=\"row\">\n      <mat-form-field class=\"w-100\">\n        <mat-label>آدرس</mat-label>\n        <textarea rows=\"3\" matInput></textarea>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <div class=\"col-md-12\">\n    <div class=\"row\">\n      <a class=\"hollow-btn hollow-btn--fit-text\" href=\"https://codete.com/career\">\n        ارسال پیام\n      </a>\n    </div>\n  </div>\n</form>\n","import { Injectable } from '@angular/core'\nimport { HttpClient } from '@angular/common/http'\nimport { ServiceBase2 } from './serivce-base2.service'\n\n\n@Injectable()\nexport class JobService extends ServiceBase2 {\n\n  constructor(public _HttpClient: HttpClient) {\n    super()\n    this._objectName = 'job/'\n  }\n\n\n\n  getAll() {\n    return this.getServiceF(`all/`)\n  }\n\n  getAllByPagination(page, filter?) {\n    return this.getServiceF(`getAll/${page}?${filter}`)\n  }\n\n  getOne(id) {\n    return this.getServiceF(`get-one/${id}`)\n  }\n\n}\n"]}